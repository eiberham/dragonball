apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      ports:
        - name: "27017"
          port: 27017
          targetPort: 27017
      selector:
        io.kompose.service: db
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: express
      name: express
    spec:
      type: NodePort #LoadBalancer
      ports:
        - name: "3000"
          # port accessible inside cluster (the exposed port)
          port: 3000
          # port to forward to inside the pod
          targetPort: 3000
      selector:
        io.kompose.service: express
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: redis
      name: redis
    spec:
      ports:
        - name: "6379"
          port: 6379
          targetPort: 6379
      selector:
        io.kompose.service: redis
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: db
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: db
        spec:
          containers:
            - image: mongo
              name: mongo
              ports:
                - containerPort: 27017
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: express
      name: express
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: express
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: express
          
        spec:
          containers:
            - image: acedeno/dragonball:v1
              name: dragonball
              ports:
                - containerPort: 3000
              resources: {}
              # so that the image gets pulled from the docker registry all the time.
              imagePullPolicy: Always
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: redis
      name: redis
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: redis
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: redis
        spec:
          containers:
            - image: redis
              name: cache
              ports:
                - containerPort: 6379
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: seed
      name: seed
    spec:
      replicas: 1 #changed replicas from 1 to 0
      selector:
        matchLabels:
          io.kompose.service: seed
      strategy:
        type: Recreate #RollingUpdate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: seed
        spec:
          containers:
            - env:
                - name: DB_HOST
                  value: db
                - name: DB_NAME
                  value: dragonball
                - name: DB_PORT
                  value: "27017"
                - name: DROP_DATABASE
                  value: "true"
                - name: REPLACE_ID
                  value: "true"
              image: pkosiec/mongo-seeding
              name: seed
              resources: {}
              volumeMounts:
                - mountPath: /data
                  name: seed-claim0
              workingDir: /data
          restartPolicy: Always
          volumes:
            - name: seed-claim0
              persistentVolumeClaim:
                claimName: seed-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: seed-claim0
      name: seed-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: entrance
      annotations:
        # kubernetes.io/ingress.class: "ingress-nginx-controller"
        nginx.ingress.kubernetes.io/rewrite-target: /$1
        # nginx.ingress.kubernetes.io/use-proxy-protocol: "false"
    spec:
      rules:
        - host: dragonball.zeta
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: express
                    port:
                      number: 3000
kind: List
metadata: {}

