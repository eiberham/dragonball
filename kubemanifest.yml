apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      ports:
        - name: "27017"
          port: 27017
          targetPort: 27017
      selector:
        io.kompose.service: db
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: express
      name: express
    spec:
      type: LoadBalancer
      ports:
        - name: "3000"
          # port accessible inside cluster (the exposed port)
          port: 3000
          # port to forward to inside the pod
          targetPort: 3000
      selector:
        io.kompose.service: express
        role: express
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: redis
      name: redis
    spec:
      ports:
        - name: "6379"
          port: 6379
          targetPort: 6379
      selector:
        io.kompose.service: redis
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      selector:
        matchLabels:
          io.kompose.service: db
      serviceName: db
      replicas: 1
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: db
        spec:
          containers:
            - image: mongo
              name: mongo
              ports:
                - containerPort: 27017
              resources: {}
          restartPolicy: Always
    #status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: express
      name: express
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: express
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: express
            role: express

        spec:
          containers:
            - image: acedeno/dragonball:v1
              name: dragonball
              ports:
                - containerPort: 3000
              resources: {}
              # so that the image gets pulled from the docker registry all the time.
              imagePullPolicy: Always
              livenessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTPS
                periodSeconds: 350 # specifies that the kubelet should perform a liveness probe every 30 seconds
                initialDelaySeconds: 120 # tells the kubelet that it should wait 30 seconds before performing the first probe
                failureThreshold: 3
                successThreshold: 1
              # readiness check
              # kubelet uses readiness probes to know when a container is ready to start accepting traffic
              # pods will be checked for readiness via http get to / on port 3000
              # if 3 checks fails the pod is considered not ready
              # if 1 check succeeds the pod will be considered ready
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTPS
                periodSeconds: 30 # specifies that the kubelet should perform a liveness probe every 30 seconds
                initialDelaySeconds: 30 # tells the kubelet that it should wait 30 seconds before performing the first probe
                failureThreshold: 3
                successThreshold: 1
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: redis
      name: redis
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: redis
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: redis
        spec:
          containers:
            - image: redis
              name: cache
              ports:
                - containerPort: 6379
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: seed
      name: seed
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: seed
      #strategy:
      #  type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifest.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: seed
        spec:
          containers:
            - env:
                - name: DB_HOST
                  value: db
                - name: DB_NAME
                  value: dragonball
                - name: DB_PORT
                  value: "27017"
                - name: DROP_DATABASE
                  value: "true"
                - name: REPLACE_ID
                  value: "true"
              image: pkosiec/mongo-seeding
              name: seed
              resources: {}
              volumeMounts:
                - mountPath: /data #/data
                  name: seed-claim0 # seed-claim take the volume declared below with the name of seed-claim0 and mount it in /data/algo
              workingDir: /data
              # readiness check
              # kubelet uses readiness probes to know when a container is ready to start accepting traffic
              readinessProbe:
                exec:
                  command:
                  - cat
                  - /data
                initialDelaySeconds: 20
                periodSeconds: 20
          restartPolicy: Always
          volumes:
            - name: seed-claim0 # seed-claim0  the volume to be mounted
              persistentVolumeClaim:
                claimName: seed-claim0
    status: {}
    #
    # PERSISTENT VOLUMES !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # It is a resource in the cluster just like a node is a cluster resource
    # PVs are volume plugins like Volumes, but have a lifecycle independent of any individual Pod that uses the PV.
    #
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: seed-v0
    spec:
      #storageClassName: standard
      volumeMode: Filesystem
      accessModes:
        - ReadWriteOnce
      claimRef:
        name: seed-claim0
      capacity:
        storage: 600Mi
      hostPath:
        path: /data
  # Persistent volume claim definition was here
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: seed-claim0
      name: seed-claim0
    spec:
      # storageClassName: manual
      volumeMode: Filesystem
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 600Mi
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: entrance
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
    spec:
      rules:
        - host: dragonball.zeta
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: express
                    port:
                      number: 3000
kind: List
metadata: {}

